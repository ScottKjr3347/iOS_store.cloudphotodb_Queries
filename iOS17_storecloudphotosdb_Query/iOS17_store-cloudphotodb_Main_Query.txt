SELECT DateTime(scopes.creationDate + 978307200, 'UNIXEPOCH') AS 'scopes-creationDate',
  scopes.scopeIdentifier AS 'scopes-scopeIdentifier = Photos.sqlite_zShare-ScopeID',
  DateTime(scopes.initialSyncDate + 978307200, 'UNIXEPOCH') AS 'scopes- initialSyncDate',
  cloudCache.class AS 'cloudCache-class',
  statusCenter.class AS 'statusCenter- class',
  cloudCache.serializedRecord AS 'cloudCache- serializedRecord',
  CASE idMapping.addDirection
    WHEN 1 THEN 'Device2iCloudPhotos-1'
    WHEN 2 THEN 'iCloudPhotos2Devcie-2'
    ELSE 'Unknown-New-Value!: ' || idMapping.addDirection || ''
  END AS 'idMapping-addDirection',
  CASE downloadQueue.resourceType
    WHEN 5 THEN 'iCloud Photos-5'
    ELSE 'Unknown-New-Value!: ' || downloadQueue.resourceType || ''
  END AS 'downloadQueue-resourceType',
  CASE downloadQueue.status
    WHEN 2 THEN 'Synced with Device-2'
    ELSE 'Unknown-New-Value!: ' || downloadQueue.status || ''
  END AS 'downloadQueue-status',
  CASE idMapping.mappingState
    WHEN 1 THEN 'Successful-1'
    WHEN 2 THEN 'StillTesting-2'
    ELSE 'Unknown-New-Value!: ' || idMapping.mappingState || ''
  END AS 'idMapping-mappingState',
  CASE downloadQueue.intent
    WHEN 1 THEN 'Completed-1'
    ELSE 'Unknown-New-Value!: ' || downloadQueue.intent || ''
  END AS 'downloadQueue-intent',
  downloadQueue.position AS 'downloadQueue-position',
  downloadQueue.taskIdentifier AS 'downloadQueue-taskIdentifier',
  downloadQueue.retryCount AS 'downloadQueue-retryCount',
  DateTime(idMapping.addTimestamp + 978307200, 'UNIXEPOCH') AS 'idMapping-addTimestamp',
  CASE cloudCache.confirmed
    WHEN 1 THEN 'Yes-1'
    WHEN 2 THEN 'StillTesting-2'
    ELSE 'Unknown-New-Value!: ' || cloudCache.confirmed || ''
  END AS 'cloudCache-confirmed',
  CASE cloudCache.state
    WHEN 1 THEN 'Active-1'
    ELSE 'Unknown-New-Value!: ' || cloudCache.state || ''
  END AS 'cloudCache-state',
  DateTime(scopes.disabledDate + 978307200, 'UNIXEPOCH') AS 'scopes-disabledDate',
  DateTime(scopes.deleteDate + 978307200, 'UNIXEPOCH') AS 'scopes-deleteDate = zShare-ExpiryDate',
  DateTime(idMapping.deleteTimestamp + 978307200, 'UNIXEPOCH') AS 'idMapping-deleteTimestamp',
  CASE idMapping.deleteDirection
    WHEN 1 THEN 'Deleted via Recently Deleted via Device Photos App-1'
    WHEN 2 THEN 'StillTesting-2'
    ELSE 'Unknown-New-Value!: ' || idMapping.deleteDirection || ''
  END AS 'idMapping-deleteDirection',
  cloudCache.identifier AS 'cloudCache- identifier = Photos.sqlite-AssetUUID-CldMstGUID',
  idMapping.cloudIdentifier AS 'idMapping- cloudIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
  remappedDeletes.cloudIdentifier AS 'remappedDeletes- Cloud Identifier',
  idMapping.localIdentifier AS 'idMapping- localIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
  statusCenter.identifier AS 'statusCenter- identifier',
  downloadQueue.itemIdentifier AS 'downloadQueue-itemIdentifier = Photos.sqlite-AssetUUID-CldMastGUID',
  downloadQueue.fingerPrint AS 'downloadQueue-fingerPrint = Photos.sqlite_zAsset-zIntResou-Fingerprint',
  cloudCache.relatedIdentifier AS 'cloudCache- relatedIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
  remappedDeletes.realIdentifier AS 'remappedDeletes- Real Identifier',
  cloudCache.secondaryIdentifier AS 'cloudCache- secondaryIdentifier = Photos.sqlite-GenAlbGUID',
  cloudCache.stagedSerializedRecord AS 'cloudCache- stagedSerializedRecord',
  cloudCache.stagedRelatedIdentifier AS 'cloudCache- stagedRelatedIdentifier',
  cloudCache.stagedSecondaryIdentifier AS 'cloudCache- stagedSecondaryIdentifier',
  downloadQueue.fileUTI AS 'downloadQueue-fileUTI',
  downloadQueue.fileSize AS 'downloadQueue-fileSize',
  scopes.estimatedSize AS 'scopes- estimatedSize',
  scopes.estimatedAssetCount AS 'scopes- estimatedAssetCount',
  DateTime(scopes.lastClearedPush + 978307200, 'UNIXEPOCH') AS 'scopes- lastClearedPush',
  DateTime(scopes.lastLibraryInfoUpdate + 978307200, 'UNIXEPOCH') AS 'scopes- last Library InfoUpdate',
  DateTime(scopes.pullFromTransportLastCompletionDate + 978307200, 'UNIXEPOCH') AS 'scopes- pull From Transport Last CompletionDate',
  scopes.droppedSomeRecords AS 'scopes- dropped Some Records',
  scopes.featureVersion AS 'scopes- feature Version',
  scopes.flags AS 'scopes-flags',
  CASE scopes.hasFetchedInitialSyncAnchor
    WHEN 1 THEN 'Yes-1'
    ELSE 'Unknown-New-Value!: ' || scopes.hasFetchedInitialSyncAnchor || ''
  END AS 'scopes- has Fetched initial Sync Anchor',
  scopes.initialSyncAnchor AS 'scopes-initial Sync Anchor',
  scopes.syncAnchor AS 'scopes- syncAnchor',
  scopes.stagedSyncAnchor AS 'scopes- staged Sync Anchor',
  scopes.transientSyncAnchor AS 'scopes- transient SyncAnchor',
  scopes.libraryInfo AS 'scopes- libraryInfo',
  scopes.scopeChange AS 'scopes- scopeChange',
  scopes.transportScope AS 'scopes- transportScope',
  scopes.classForInitialQuery AS 'scopes- class For Initial Query',
  scopes.uploadTransportGroup AS 'scopes- upload Transport Group',
  scopes.downloadTransportGroup AS 'scopes- download Transport Group',
  scopes.pushToTransportCurrentGeneration AS 'scopes- push To Transport Current Generation',
  scopes.pushToTransportTargetGeneration AS 'scopes- push To Transport Target Generation',
  scopes.pullFromTransportTargetGeneration AS 'scopes- pull From Transport Target Generation',
  scopes.pullFromTransportExpirationInterval AS 'scopes- pull From Transport Expiration Interval',
  scopes.clientNeedsToPullCurrentGeneration AS 'scopes- client Needs To Pull Current Generation',
  scopes.clientNeedsToPullTargetGeneration AS 'scopes- client Needs To Pull Target Generation',
  scopes.updateTransportCurrentGeneration AS 'scopes- update Transport Current Generation',
  scopes.updateTransportTargetGeneration AS 'scopes- update Transport Target Generation',
  statusCenter.generation AS 'statusCenter- generation'
FROM idMapping
  LEFT JOIN scopes ON scopes.stableIndex = idMapping.stableScopeIndex
  LEFT JOIN cloudCache ON cloudCache.identifier = idMapping.cloudIdentifier
  LEFT JOIN downloadQueue ON downloadQueue.itemIdentifier = cloudCache.identifier
  LEFT JOIN statusCenter ON statusCenter.identifier = idMapping.cloudIdentifier
  LEFT JOIN remappedDeletes ON remappedDeletes.cloudIdentifier = idMapping.cloudIdentifier
ORDER BY idMapping.addTimestamp
