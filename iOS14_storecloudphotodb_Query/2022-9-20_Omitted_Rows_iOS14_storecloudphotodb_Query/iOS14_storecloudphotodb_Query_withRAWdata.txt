SELECT
--scopes.scopeType AS 'scopes-localIndex',
--cloudCache.localScopeIndex AS 'cloudCache- localScopeIndex',
--scopes.cloudIndex AS 'scopes- cloudIndex',
--cloudCache.scopeIndex AS 'cloudCache- scopeIndex',
--downloadQueue.scopeIndex AS 'downloadQueue-scopeIndex',
--scopes.stableIndex AS 'scopes- stableIndex',
--idMapping.stableScopeIndex AS 'idMapping- stableScopeIndex',
--statusCenter.scopeIndex AS 'statusCenter- scope Index',
--remappedDeletes.scopeIndex AS 'remappedDeletes- scope Index',
	DateTime( scopes.creationDate + 978307200, 'UNIXEPOCH' ) AS 'scopes-creationDate',
	scopes.creationDate AS 'RAW scopes-creationDate',
	scopes.scopeIdentifier AS 'scopes-scopeIdentifier = Photos.sqlite_zShare-ScopeID',
	DateTime( scopes.initialSyncDate + 978307200, 'UNIXEPOCH' ) AS 'scopes- initialSyncDate',
	scopes.initialSyncDate AS 'RAW scopes-initialSyncDate',
	cloudCache.class AS 'cloudCache-class',
	statusCenter.class AS 'statusCenter- class',
	cloudCache.serializedRecord AS 'cloudCache- serializedRecord',
CASE
		idMapping.addDirection 
		WHEN 1 THEN
		'Device2iCloudPhotos-1' 
		WHEN 2 THEN
		'iCloudPhotos2Devcie-2' ELSE idMapping.addDirection 
	END AS 'idMapping-addDirection',
	idMapping.addDirection AS 'RAW idMapping-addDirection',
CASE
		downloadQueue.resourceType 
		WHEN 5 THEN
		'iCloud Photos-5' ELSE downloadQueue.resourceType 
	END AS 'downloadQueue-resourceType',
	downloadQueue.resourceType AS 'RAW downloadQueue-resourceType',
CASE
		downloadQueue.status 
		WHEN 2 THEN
		'Synced with Device-2' ELSE downloadQueue.status 
	END AS 'downloadQueue-status',
	downloadQueue.status AS 'RAW downloadQueue-status',
CASE
		idMapping.mappingState 
		WHEN 1 THEN
		'Successful-1' 
		WHEN 2 THEN
		'Unknown-2' ELSE idMapping.mappingState 
	END AS 'idMapping-mappingState',
	idMapping.mappingState AS 'RAW idMapping-mappingState',
CASE
		downloadQueue.intent 
		WHEN 1 THEN
		'Completed-1' ELSE downloadQueue.intent 
	END AS 'downloadQueue-intent',
	downloadQueue.intent AS 'RAW downloadQueue-intent',
	downloadQueue.position AS 'downloadQueue-position',
	downloadQueue.taskIdentifier AS 'downloadQueue-taskIdentifier',
	downloadQueue.retryCount AS 'downloadQueue-retryCount',
	DateTime( idMapping.addTimestamp + 978307200, 'UNIXEPOCH' ) AS 'idMapping-addTimestamp',
	idMapping.addTimestamp AS 'RAW idMapping-addTimestamp',	
CASE
		cloudCache.confirmed 
		WHEN 1 THEN
		'Yes-1' 
		WHEN 2 THEN
		'Unknown-2' ELSE cloudCache.confirmed 
	END AS 'cloudCache-confirmed',
	cloudCache.confirmed AS 'RAW cloudCache-confirmed',
CASE
		cloudCache.state 
		WHEN 1 THEN
		'Active-1' ELSE cloudCache.state 
	END AS 'cloudCache-state',
	cloudCache.state AS 'RAW cloudCache-state',
	DateTime( scopes.disabledDate + 978307200, 'UNIXEPOCH' ) AS 'scopes-disabledDate',
	scopes.disabledDate AS 'RAW scopes-disabledDate',
	DateTime( scopes.deleteDate + 978307200, 'UNIXEPOCH' ) AS 'scopes-deleteDate = zShare-ExpiryDate',
	scopes.deleteDate AS 'RAW scopes-deleteDate',
	DateTime( idMapping.deleteTimestamp + 978307200, 'UNIXEPOCH' ) AS 'idMapping-deleteTimestamp',
	idMapping.deleteTimestamp AS 'RAW idMapping-deleteTimestamp',
	DateTime( remappedDeletes.deleteDate + 978307200, 'UNIXEPOCH' ) AS 'remappedDeletes- Delete Date',
	remappedDeletes.deleteDate AS 'RAW remappedDeletes-deleteDate',
CASE
		idMapping.deleteDirection 
		WHEN 1 THEN
		'Deleted via Recently Deleted via Device Photos App-1' 
		WHEN 2 THEN
		'unknown-2' ELSE idMapping.deleteDirection 
	END AS 'idMapping-deleteDirection',
	idMapping.deleteDirection AS 'RAW idMapping-deleteDirection',
	cloudCache.identifier AS 'cloudCache- identifier = Photos.sqlite-AssetUUID-CldMstGUID',
	idMapping.cloudIdentifier AS 'idMapping- cloudIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
	remappedDeletes.cloudIdentifier AS 'remappedDeletes- Cloud Identifier',
	idMapping.localIdentifier AS 'idMapping- localIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
	statusCenter.identifier AS 'statusCenter- identifier',
	downloadQueue.itemIdentifier AS 'downloadQueue-itemIdentifier = Photos.sqlite-AssetUUID-CldMastGUID',
	downloadQueue.fingerPrint AS 'downloadQueue-fingerPrint = Photos.sqlite_zAsset-zIntResou-Fingerprint',
	cloudCache.relatedIdentifier AS 'cloudCache- relatedIdentifier = Photos.sqlite-AssetUUID-CldMstGUID',
	remappedDeletes.realIdentifier AS 'remappedDeletes- Real Identifier',
	cloudCache.secondaryIdentifier AS 'cloudCache- secondaryIdentifier = Photos.sqlite-GenAlbGUID',
	cloudCache.stagedSerializedRecord AS 'cloudCache- stagedSerializedRecord',
	cloudCache.stagedRelatedIdentifier AS 'cloudCache- stagedRelatedIdentifier',
	cloudCache.stagedSecondaryIdentifier AS 'cloudCache- stagedSecondaryIdentifier',
	downloadQueue.fileUTI AS 'downloadQueue-fileUTI',
	downloadQueue.fileSize AS 'downloadQueue-fileSize',
	scopes.estimatedSize AS 'scopes- estimatedSize',
	scopes.estimatedAssetCount AS 'scopes- estimatedAssetCount',
	DateTime( scopes.lastClearedPush + 978307200, 'UNIXEPOCH' ) AS 'scopes- lastClearedPush',
	scopes.lastClearedPush AS 'RAW scopes-lastClearedPush',
	DateTime( scopes.lastLibraryInfoUpdate + 978307200, 'UNIXEPOCH' ) AS 'scopes- last Library InfoUpdate',
	scopes.lastLibraryInfoUpdate AS 'RAW scopes-lastLibraryInfoUpdate',
	DateTime( scopes.pullFromTransportLastCompletionDate + 978307200, 'UNIXEPOCH' ) AS 'scopes- pull From Transport Last CompletionDate',
	scopes.pullFromTransportLastCompletionDate AS 'RAW scopes-pullFromTransportLastCompletionDate',
	scopes.droppedSomeRecords AS 'scopes- dropped Some Records',
	scopes.featureVersion AS 'scopes- feature Version',
	scopes.flags AS 'scopes-flags',
CASE
		scopes.hasFetchedInitialSyncAnchor 
		WHEN 1 THEN
		'Yes-1' ELSE scopes.hasFetchedInitialSyncAnchor 
	END AS 'scopes- has Fetched initial Sync Anchor',
	scopes.hasFetchedInitialSyncAnchor AS 'RAW scopes-hasFetchedInitialSyncAnchor',
	scopes.initialSyncAnchor AS 'scopes-initial Sync Anchor',
	scopes.syncAnchor AS 'scopes- syncAnchor',
	scopes.stagedSyncAnchor AS 'scopes- staged Sync Anchor',
	scopes.transientSyncAnchor AS 'scopes- transient SyncAnchor',
	scopes.libraryInfo AS 'scopes- libraryInfo',
	scopes.scopeChange AS 'scopes- scopeChange',
	scopes.transportScope AS 'scopes- transportScope',
	scopes.classForInitialQuery AS 'scopes- class For Initial Query',
	scopes.uploadTransportGroup AS 'scopes- upload Transport Group',
	scopes.downloadTransportGroup AS 'scopes- download Transport Group',
	scopes.pushToTransportCurrentGeneration AS 'scopes- push To Transport Current Generation',
	scopes.pushToTransportTargetGeneration AS 'scopes- push To Transport Target Generation',
	scopes.pullFromTransportTargetGeneration AS 'scopes- pull From Transport Target Generation',
	scopes.pullFromTransportExpirationInterval AS 'scopes- pull From Transport Expiration Interval',
	scopes.clientNeedsToPullCurrentGeneration AS 'scopes- client Needs To Pull Current Generation',
	scopes.clientNeedsToPullTargetGeneration AS 'scopes- client Needs To Pull Target Generation',
	scopes.updateTransportCurrentGeneration AS 'scopes- update Transport Current Generation',
	scopes.updateTransportTargetGeneration AS 'scopes- update Transport Target Generation',
	pushRepository.class AS 'pushRepository- class',
	pushRepository.scopeIndex AS 'pushRepository- scopeIndex',
	pushRepository.identifier AS 'pushRepository- identifier',
	pushRepository.changeType AS 'pushRepository- changeType',
	pushRepository.relatedIdentifier AS 'pushRepository- relatedIdentifier',
	pushRepository.secondaryIdentifier AS 'pushRepository- secondaryIdentifier',
	DateTime( pushRepository.dequeueOrder + 978307200, 'UNIXEPOCH' ) AS 'pushRepository- dequeueOrder',
	pushRepository.dequeueOrder AS 'RAW pushRepository- dequeueOrder',
	pushRepository.trashed AS 'pushRepository- trashed',
	pushRepository.uploadIdentifier AS 'pushRepository- upload Identifier',
	pushRepository.trustLevel AS 'pushRepository- trust Level',
	pushRepository.serializedRecord AS 'pushRepository- serialized Record',
	statusCenter.generation AS 'statusCenter- generation' 
FROM
	idMapping
	LEFT JOIN scopes ON scopes.stableIndex = idMapping.stableScopeIndex
	LEFT JOIN cloudCache ON cloudCache.identifier = idMapping.cloudIdentifier
	LEFT JOIN pushRepository ON pushRepository.identifier = cloudCache.identifier
	LEFT JOIN downloadQueue ON downloadQueue.itemIdentifier = cloudCache.identifier
	LEFT JOIN statusCenter ON statusCenter.identifier = idMapping.cloudIdentifier
	LEFT JOIN remappedDeletes ON remappedDeletes.cloudIdentifier = idMapping.cloudIdentifier 
ORDER BY
	idMapping.addTimestamp